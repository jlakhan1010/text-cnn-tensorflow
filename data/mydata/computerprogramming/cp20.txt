What is the best strategy to improve my skills in competitive programming in C++ in 2-3 months?
This post has been taken from the blog post  Learn to Code by Competitive Programming written by MV Kaushik when he was interning at HackerEarth

Here are some steps to get started and be good at it.

Get comfortable writing code in either of one of these languages C, C++ or Java. Why only C, C++ or Java? Because these are the standard languages allowed in any programming competition.
 
If you are already good at C, it is suggested to learn C++. It is the most popular language among competitive programmers because of its speed and an excellent library in the form of STL (Standard Template Library).
 
Pick an online judge. Recommended ones are Topcoder and Codeforces. These sites have high quality of problems and also allow you to see other’s code post contest completion. These also categorize problems based on the topic. Some other popular judges include SPOJ, CodeChef (powered by SPOJ) andHackerEarth.
 
To begin with, start with simple problems that typically require transformingEnglish to code and does not require any knowledge on algorithms. Solving Div 2 250 (Division 2, 250 points) in Topcoder or Div 2 Problem A in Codeforces is a good start.

At the early stages of programming one tends to write long pieces of code, which is actually not required. Try to keep codes short and simple.

Practice these problems until you become comfortable that you can submit it for 240 odd points on any day.

Start implementing basic(or standard) algorithms. It is suggested to read them from Topcoder tutorials or Introduction to algorithms.

1) Graph algorithms: Breadth first search(BFS), Depth first search(DFS), Strongly connected components(SCC), Dijkstra, Floyd-Warshall, Minimum spanning tree(MST), Topological sort.

2) Dynamic programming: Standard dynamic programming problems such as Rod Cutting, Knapsack, Matrix chain multiplication etc.

3) Number theory: Modular arithmetic, Fermat’s theorem, Chinese remainder theorem(CRT), Euclidian method for GCD, Logarithmic 
Exponentiation, Sieve of Eratosthenes, Euler’s totient function.

3) Greedy:  Standard problems such as Activity selection.

4) Search techniques: Binary search, Ternary search and Meet in the middle.

5) Data structures (Basic): Stacks, Queues, Trees and Heaps.

6) Data structures (Advanced): Trie, Segment trees, Fenwick tree or Binary indexed tree(BIT), Disjoint data structures.

7) Strings: Knuth Morris Pratt(KMP), Z algorithm, Suffix arrays/Suffix trees. These are bit advanced algorithms.

8) Computational geometry: Graham-Scan for convex hull, Line sweep.

9) Game theory: Basic principles of Nim game, Grundy numbers, Sprague-Grundy theorem.

The list is not complete but these are the ones that you encounter very frequently in the contests. There are other algorithms but are required very rarely in the contests.

You can find description and implementation of standard algorithms here

Once you have sufficient knowledge of popular algorithms, you can start solving the medium level problems. That is Div 2 all problems in Topcoder and Codeforces. It is advisable not to go for Div 1 500 at this point.

Learning to code is all about practicing. Participate regularly in the programming contests. Solve the ones that you cannot solve in the contest, after the contest. Apart from Topcoder and Codeforces you can also look at HackerEarth Challengesor Codechef contests.

Read the codes of high rated programmers. Compare your solution with them. You can observe that it is simple and shorter than your solution. Analyse how they have approached and improve your implementation skills.

Read the editorials after the contest. You can learn how to solve the problems that you were not able to solve in the contest and learn alternative ways to solve the problems which you could solve.

Always practice the problems that you could solve in the contest. Suppose if you are able to solve Div 2 250 and 500 in the contest but not Div 2 1000 then practice as many Div 2 1000 problems as as you can.

Do not spend too much time if you are not getting the solution or are stuck somewhere. 

After you feel that you have spent enough time, look at the editorials. Understand the algorithm and code it. Do not look at the actual solution before you have attempted to write the code on your own.

Programming is a very practical and hands on skill. You have to continuously do it to be good at it. It’s not enough to solve the problem theoretically, you have to code it and get the solution accepted. Knowing which algorithm/logic to use and implementing it are two different things. It takes both to be good at programming.

Programming learning phase is going to take a lot of time and the key is practicing regularly. It takes some time before you can attempt Div 1 500 and other tough problems. Do not give up on reading the editorials and implementing them, even if it takes many hours/days. Remember everything requires practice to master it.

It takes considerable amount of time before you get good at it. You have to keep yourself motivated throughout. Forming a team and practicing is a good choice. Not giving up is the key here.
Many people tell you that solving lots of problems and you will become red on Topcoder/Codeforces one day. It is true, and is the only universally approved way in competitive programming community, but it is actually just half of the story. Let me first explain to you the `science` of problem solving (which is not very scientific, since it was only developed by myself).

For each problem, in order to solve it, you must jump over a gap. It can be either a difficult implementation, or some hard-to-see observation, difficult algorithm, etc.


For me, some problems are very easy (e.g. Codeforces div 2 A, B..), because those gaps seem so small to me, and passing through them feel just like casual walking.


Some problems are very hard. The gap is just too huge, or there are many many gaps, and you can get stuck in the middle because you're too tired after maybe first gap.


Using this science, we can explain a lot of phenomenon in the competitive programming world:

Some guys learn very fast, got to div 1 in Topcoder/Codeforces only after like a couple of weeks since he started programming. Some people are born with high jumping ability (problem solving skill). They can jump over average gaps easily.
The more you train, the better you become: Of course, if you jump around all day, you must be somewhat better at jumping through gaps, and thus being able to solve more difficult problems in less time, since you don't need lots of mental preparation or warm up excercise before jumping.
But.. it also means that, if you just solve too easy problems, you can still only walk through small gaps. You may walk through gaps faster, but you are still unable to jump.

So yes, the best strategy to improve your competitive programming skill is to practice a lot, but you must solve gradually harder problems, not just the easy ones. Get out of your comfort zone and challenge yourself. For example, if you solve problems on Codeforces:

Sort by number of people who solved it.
Start with page 1
Solve some problems. If you feel you can solve them in like 5-10 mins, immediately ignore the other problems, move on to page 2
Continue until you feel challenged (e.g. need like an hour to solve / can not solve at all / ...).
Try really hard, but if you fail, look at editorial, ask for solutions, ...
I will tell you my story How and why I started doing competitive programming .

After the completion of 1st year ,my branch got upgraded to Mechanical Engineering.After coming to Mechanical branch, I had no idea what to do further. I talked to some seniors of mechanical and computer science of IIT BHU about it..

I had never faced single problem of competitive coding before coming to IIT. I became familiar with it in 2nd semester of 1st year. It was compulsory to study the course of C programming language in 2nd semester. But unfortunately at end of semester I didn't get good grade in this course(I got B grade)

My main aim is to do job after 4years of Btech. I have no interest in further higher studies after Btech. So one of my good senior Sourabh Rajendu of Computer science branch of IIT BHU adviced me to go for competitive coding. He gave a lot of useful tips to improve coding. Also he motivated a lot at every stage and every day. I followed his tips..I started in C++ language .. Initially I was not able to solve even easy level of questions. He suggested me to start from HackerRank . While solving a problem I saw some of editorials and tutorials of questions. After writing codes of 100–120 questions in 2–3 months of easy and medium level of questions of hackerrank, I started to feel that I can improve in this field. Currently I am trying to uplift my level more in competitive programming.

Few advices which I would like to give beginners or have never done Competitive Programming :-

If you had interest in Maths in school days ,you can do wonder in Competitive coding.
It's okay to see the solutions and editorials of a question if you are beginner. But try to understand the logic behind this , don't mugg up ..Write the code on your own after understanding the solutions deeply.
Try to solve question on your own at first and then prefer to see solutions.
Try to take help from seniors who are experienced in Competitive coding.Even if you are not able to understand any solution of a problem,ask to your seniors. I had taken help from Some seniors like Amit Ranjan . He is ACM ICPC qualified and currently going to do internship in Microsoft.
If you are beginner, you will have to spend good amount of time to practice. There may be a day when you are able to solve only a single question . But don't get demotivated by this. It's okay if you have done a single question in whole day.
Don't jump initially to contests. Atfirst solve some 100 questions and then go to contests of Hackerrank, Codeforces, beginner | CodeChef..
There is no “best” way to practice competitive programming, because different approaches work for different people. However, the one that has worked for me and most of my friends (1900–2300 rated on CodeForces) is:

Competing: I compete in online contests actively, as well as with friends of similar level. The former helps to solve questions seriously while the latter helps to have someone to discuss questions with.
A2oJ: I use A2oJ rating/difficulty ladder to find and solve questions from various topics in an increasing order of difficulty and use A2oJ categories to solve questions from specific topic after learning that topic from an online resource.
Recommendations: I use sites such as code-drills to get recommendations on what questions to solve and use CF Statistics to find and solve questions solved by a friend that have not been solved by me.
CodeForces Gym: These are good for team practice for contests like ACM-ICPC, and there are good contests like Andrew Stankevich Contests which have a lot to offer.
What matters the most is learning through experience, rather than learning from book. A common mistake I see among people just starting out with competitive programming is that they feel that they need to learn the algorithms and data structures before participating in a contest, which is a misconception, since most of the easier questions (A-C on CodeForces Div. 2) do not involve any algorithms and even the harder questions (D-E on CodeForces Div. 2) require atmost Graph Theory and Dynamic Programming in general, if at all.
Thanks for the A2A..
Having basic knowledge of Data Structures and Algorithms is great but the actual test is in actually implementing them and using them to solve various real life problems available on various online coding platforms. First of all you need to know of the various coding platforms that are out there:

1)  Programming Competition,Programming Contest,Online Computer Programming. One of the best sites to practice coding on is Code Chef. It holds three challenges monthly 
   Long Challenge which is a 10 day long challenge mostly comprising of 10 questions.
Short Challenge which is a 2.5 hour contest and it is mainly focused upon your speed plus your accuracy.
The Lunch Time which is mainly focused on school kids ( a great initiative by Code Chef ) and it is an IOI style contest.
2) Codeforces is a Russian website dedicated to competitive programming.
 Codeforces provides to all users following main services:
participation in the short (2-hours) contests, so-called "Codeforces Rounds", held about once a week;
ability to solve problems from previous contests for training purposes;
"polygon" for creating and testing problems;
kind of social-networking by using of internal public blogs.
3) Page on topcoder.com .TopCoder is a company which administers contests in competitive programming. TopCoder hosts fortnightly online competitive programming competitions—known as SRMs or "single round matches"—as well as weekly competitions in design and development. The work in design and development produces useful software which is licensed for profit by TopCoder. Competitors involved in the creation of these components are paid royalties based on these sales.    
This is probably the oldest one out there and has an amazing set of problems section from past contests. The top coder arena and the way the problem has to be coded are a little bit different from the conventional sites.

Then there are others like
Sphere Online Judge (SPOJ)
HackerEarth | We help developers find great jobs
HackerRank, etc etc
HackerEarth also hosts various Hiring challenges for graduates as well as professionals. So the point is that the competitions will keep you occupied the entire time. It is upto your motivation and dedication as to how much you can solve !!!


Now coming to the part where you probably are thinking " How the hell should I start off with all this ? "

There is nothing new that I would be able to tell you. So I would rather quote what Anudeep Nekkanti has to say :

If I am to start programming now, I would do it this way
Solve 200 most solved problems on SPOJ, Problem by problem. In 2 months.
(This will teach all standard problems, algorithms and implementation skills)
Solve problems from CodeChef and CodeForces for 2 months.
(This will teach variations, we can read others solutions and learn better ways. Skip easy problems)
Solve problems from TopCoder for 2 months.
(This will teach  Dynamic Programming. Div 1 500p)
Check past ACM ICPC Regional's Problems
(Great quality problems)

If I am to learn a new Algorithm now, I would do it this way
Read it from at least 3-4 different sources.
Understand correctness proof and run-time analysis.
(This is very very important, you will know it only when you  deal with non standard  and hard problems)
Question yourself on every step for correctness. Try to tweak the implementation.
Check other implementations

You need to refer to external links, tutorials, books, research papers, etc. on various topics like for Data Structures and Algorithms you need to study Greedy Approaches, Divide and Conquer, Constructive/Iterative Algorithms, Graphs, Trees and other Data Structures... and some of the tough ones like, Ropes, Segmentation Trees, etc. which you will eventually learn after much of your efforts..... apart from this you need to build your mathematical basics to the best, to utilize your capabilities, including series(Fibonacci, Catalan, AP, GP, HP etc.), formulas, Probability, Permutation, Combination etc.... Sometimes there is a requirement some other subjects(like Physics) but most of relevant information is provided in the question itself....

And for your purpose of being a "Good Programmer".... don't ever try to copy codes.... even if you are looking some editorial or research papers... try to study the logic and then write the code yourself.... Try to study the codes of other coders... if you cant understand them... just try to print the intermediate results to understand the logic behind each line.... One thing which may effect you during the competitive programming is cheating... to overcome this you can take a print out of the relevant resources and try to solve things by hand.... for more purposes use discussion forums to solve your problems, there are so many awesome coder and top performers which are thirsty of solving your doubts :P ....

As far as resources are concerned, some of the best ones that I have found so far are

Data Structures and Algorithms
MAXimal :: algo
What are the "must known" algorithms for online programming contests?


So finally putting an end to this 

if ( BORING(article.txt) == TRUE)
      cout<<"Boring";
else
     cout <<"Interesting :p";

Competitive programming, like any other sports and subjects, require hardworking. That is the most important thing.

Now, people often think that who are capable of solving E or F Div 1 have genius intelligence, but the fact is that they are not. I know a guy who is red in CF and has Gold Medal in IOI, but he is just a normal person with average IQ, not some kind of a monster geek. So what makes him better than everyone else at solving these problems? The answer is he keeps solving these problems everyday in 2 years, without a day off. That requires a lot of patient and will power, and that what makes his success.

I cannot emphasize how important hardworking is, but doing it the right way is of the same essence. This is some important note you should know before dive into competitive programming:

Keeps your life balance! Do not become someone wakes up and sleeps before the computer monitor and makes your life trapped inside the screen. This is my personal experience, how many thing you gain from this is not matter to what you lost from the real life. Remember to keeps competitive programming in the right position, it is just a small part of your life. This is not contradict with hardworking. You are only able to success in competitive programming only if you live with it, not against it.
Keep your physical and mental healthy, solving problems requires good health and great attention.
Solve the problem in a limit amount of time, keep it from 30 - 60 minutes per problem. Problems are often have very simple idea and are designed to be figured out in little time. The tricky part is you have to find the right way to solve it, and this is mostly depend on instinct, and only able to improve through time by gaining experience.
Learn more algorithms. Algorithm is your toolbox, you cannot solve the problem without its right tool.
Develop the ability to classify problem. Problems are often fall into some categories: dynamic programming, graph, brute force, etc. Knowing the type of the problems you have to deal with makes finding the solution easier.
Do not skip problem. Do not skip easy problem. Do not skip hard problem. If you don’t know how to solve it, ask. Never let it slide. Only by this way can you be a better coder.
Quality is better than quantity. Never stop challenging yourself, solving hard problems. Never be satisfied because you solve more problems than other but these problems are familiar to you. Solve the problem you do not know.
Code once, submit once. Finding the solution is a hard work, no doubt. But coding is what makes competitive programming so hard. One bug, and your hole solution get WA. Practice get AC right after the first submit is crucial to be better in competitive programming.
Practice debug by reading code, not by using debugger, not by printing to the screen. You cannot doing this all the time, but do it as much as you can. Debugging is a lot faster if you practice this.
Use your time carefully, time management is vital when you are in a competition.
The last and not least, HAVE FUN. If you do not find competitive programming is fun, then stop. If not, it will make you suffer (this is hyperbole, but I am not joking).
I will try to answer this question. Imagine for next 6 months.

Stage 1: Setting up the base.(2 months)

Try solving first 200 problems in Sphere Online Judge (SPOJ) . for the first 2 months , try to do all the problems on your own. Stick with this for first 2 months till you gain confidence.

Stage 2: Moving to Code Chef(2 months)

Once you gain some confidence on SPOJ problems, move on to codechef and practice for next 2 months.

Stage 3: Moving to Top coder (2 months)
Now move to top coder and try competing in SRMs.

Practice daily , try solving 2 or 3 problems on your own. It might take an hour or 5 hours but do it on your own . Trust me after 2 months you will have a very good confidence in problem solving .

This is a sport , the more you train yourself the better you are.  Hope this helps.
